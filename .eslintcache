[{"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\App.js":"1","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\sidebarData.js":"2","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\forecastTiles.js":"3","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\pages\\forecast.js":"4","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\index.js":"5","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\api\\current-api.js":"6","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\detailinfo.js":"7","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\api\\forecast-api.js":"8"},{"size":3671,"mtime":1607910736427,"results":"9","hashOfConfig":"10"},{"size":556,"mtime":1607428431363,"results":"11","hashOfConfig":"10"},{"size":2391,"mtime":1607909343181,"results":"12","hashOfConfig":"10"},{"size":1177,"mtime":1607889607160,"results":"13","hashOfConfig":"10"},{"size":165,"mtime":1607428431364,"results":"14","hashOfConfig":"10"},{"size":380,"mtime":1607858940358,"results":"15","hashOfConfig":"10"},{"size":1119,"mtime":1607909212997,"results":"16","hashOfConfig":"10"},{"size":381,"mtime":1607858980935,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dfyc7j",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\App.js",[],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\sidebarData.js",[],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\forecastTiles.js",["37","38"],"import React, { Component } from \"react\";\r\nimport DetailedInfo from \"./detailinfo\";\r\nimport {Collapse} from 'antd';\r\n\r\nconst { Panel } = Collapse;\r\nexport default class ForecastTiles extends Component {\r\n\r\n  _Days = data => {\r\n    return (data.list.reduce((list, item) => {\r\n      const forecastDate = item.dt_txt.substr(0,10);\r\n      list[forecastDate] = list[forecastDate] || [];\r\n      list[forecastDate].push(item);\r\n\r\n      return list;\r\n    }, {}));\r\n  };\r\n\r\n  _DayInfo = data => {\r\n    const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n  };\r\n\r\n _getIcon = data => `https://openweathermap.org/img/w/${data[0].weather[0].icon}.png`;\r\n_getDesc = data => {\r\n  return data[0].weather[0].description;\r\n}\r\n  _getInfo = (data, min=[], max=[], humidity=[]) => {\r\n    data.map(item => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n      humidity.push(item.main.humidity);\r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n\r\n    const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\r\n\r\n    return (\r\n      <div className=\"weather-info\">\r\n        <div className=\"min-max\">\r\n          <strong>{`${minMax.max}°C`}</strong> / {`${minMax.min}°C`}\r\n        \r\n          {` Avg. Humidity: ${avgHumdity}%`}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n \r\n\r\n  render() {\r\n\r\n    const { forecasts } = this.props;\r\n    const tiles = Object.values(this._Days(forecasts));\r\n\r\n\r\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\r\n\r\n    return (\r\n      <div >\r\n        {forecastTiles.map((item, i) => (\r\n          <div\r\n            key={i}\r\n            ref={`div-${i}`}>\r\n            <Collapse>\r\n            <div className=\"center\">\r\n              <p>\r\n            <img src={this._getIcon(item)}/>\r\n            {this._DayInfo(item)} <br/>\r\n            {this._getDesc(item)}\r\n            {this._getInfo(item)}\r\n            </p>\r\n            </div>\r\n            \r\n            <Panel showArrow={false} >\r\n            <div className=\"detailed-info\" key={i}>\r\n              <DetailedInfo data={item} />\r\n            </div>\r\n            </Panel>\r\n            </Collapse>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}",["39","40"],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\pages\\forecast.js",[],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\index.js",[],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\api\\current-api.js",[],"D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\components\\detailinfo.js",["41"],"import React from \"react\";\r\nimport {TimeIcon} from 'evergreen-ui';\r\nimport '../App.css';\r\nconst DetailedInfo = ({ data }) => {\r\n\r\n  const getHour = time => time ? new Date(time).getHours() : new Date().getHours();\r\n  const getDate = date => date ? new Date(date).getDate() : new Date().getDate();\r\n\r\n  const displayMoreInfo = (item, i) => {\r\n    return (\r\n      <div className=\"hourly-info\" key={i}>\r\n        <div>\r\n        <TimeIcon/> {`${getHour(item.dt * 1000)}:00`}\r\n        </div>\r\n        <div>\r\n          <img src={`https://openweathermap.org/img/w/${item.weather[0].icon}.png`}/>\r\n        </div>\r\n        <div>\r\n          {`${Math.round(item.main.temp)}°C`}\r\n        </div> \r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    <div className=\"hourly\">\r\n      {data.map((item, i) => (\r\n        (getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate()) ? (\r\n          displayMoreInfo(item, i)\r\n         ) : getHour(item.dt * 1000) >= 5 && getHour(item.dt * 1000) <= 23 ? (\r\n            displayMoreInfo(item, i)\r\n         ) : null\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfo;","D:\\Kampus\\Semester3\\UAS\\PTI\\UASPTI2020\\src\\api\\forecast-api.js",[],{"ruleId":"42","severity":1,"message":"43","line":28,"column":19,"nodeType":"44","messageId":"45","endLine":28,"endColumn":21},{"ruleId":"46","severity":1,"message":"47","line":71,"column":13,"nodeType":"48","endLine":71,"endColumn":45},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"46","severity":1,"message":"47","line":16,"column":11,"nodeType":"48","endLine":16,"endColumn":86},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-global-assign","no-unsafe-negation"]